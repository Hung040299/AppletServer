"use strict";
/* tslint:disable */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * River_Applet_Server
 * Appletサーバ。
 *
 * OpenAPI spec version: 0.0.8
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const localVarRequest = require("request");
const riiiverdb = __importStar(require("user-session/riiiverdb"));
const config = require("../api/controllers/config");
let defaultBasePath = config.server + "/api";
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) {
                // is Enum
                return data;
            }
            if (!typeMap[type]) {
                // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
/**
 * ActionProxyの情報。
 */
class ActionProxyData {
    static getAttributeTypeMap() {
        return ActionProxyData.attributeTypeMap;
    }
}
exports.ActionProxyData = ActionProxyData;
ActionProxyData.discriminator = undefined;
ActionProxyData.attributeTypeMap = [
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "parameters",
        baseName: "parameters",
        type: "Array<ActionProxyData.ParametersEnum>"
    },
    {
        name: "authType",
        baseName: "authType",
        type: "AuthType"
    }
];
(function (ActionProxyData) {
    let ParametersEnum;
    (function (ParametersEnum) {
        ParametersEnum[ParametersEnum["Location"] = "location"] = "Location";
    })(ParametersEnum = ActionProxyData.ParametersEnum || (ActionProxyData.ParametersEnum = {}));
})(ActionProxyData = exports.ActionProxyData || (exports.ActionProxyData = {}));
/**
 * Appletテンプレート利用時の2つ目以降のAction Block IDの列 1つ目のTrigger Blockは\"action\"に指定されたものとし、2つ目以降をこの配列に格納 処理の優先順位がある場合、\"action\"に記載されたもの→配列に記載されたBlockの先頭から末尾の順となる
 */
class Actions extends Array {
}
exports.Actions = Actions;
Actions.discriminator = undefined;
/**
 * Appletオブジェクト。Blockの組み合わせを記述する。ユーザは自由にAppletを作成できる。 商用でどういうデータ構造になるかはまだ検討が必要だが、プロトタイプではtrigger/service/actionの3段階構成で、 それぞれBlockのIDを記述して組み合わせる。
 */
class Applet {
    static getAttributeTypeMap() {
        return Applet.attributeTypeMap;
    }
}
exports.Applet = Applet;
Applet.discriminator = undefined;
Applet.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "title",
        baseName: "title",
        type: "I18nObject"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "toolIds",
        baseName: "toolIds",
        type: "Array<ToolId>"
    },
    {
        name: "categoryIds",
        baseName: "categoryIds",
        type: "Array<CategoryId>"
    },
    {
        name: "vendorId",
        baseName: "vendorId",
        type: "VendorId"
    },
    {
        name: "deviceId",
        baseName: "deviceId",
        type: "DeviceTypeId"
    },
    {
        name: "iconUrl",
        baseName: "iconUrl",
        type: "string"
    },
    {
        name: "version",
        baseName: "version",
        type: "AppletVersion"
    },
    {
        name: "trigger",
        baseName: "trigger",
        type: "string"
    },
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "action",
        baseName: "action",
        type: "string"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "preferences",
        baseName: "preferences",
        type: "AppletPreferences"
    },
    {
        name: "permissionList",
        baseName: "permissionList",
        type: "PermissionList"
    },
    {
        name: "oauthServiceType",
        baseName: "oauthServiceType",
        type: "Applet.OauthServiceTypeEnum"
    },
    {
        name: "serviceProxy",
        baseName: "serviceProxy",
        type: "ServiceProxyData"
    },
    {
        name: "actionProxy",
        baseName: "actionProxy",
        type: "ActionProxyData"
    },
    {
        name: "proxies",
        baseName: "proxies",
        type: "Proxies"
    },
    {
        name: "isDeleted",
        baseName: "isDeleted",
        type: "boolean"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "TemplateType"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "Triggers"
    },
    {
        name: "services",
        baseName: "services",
        type: "Services"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "Actions"
    },
    {
        name: "osType",
        baseName: "osType",
        type: "string"
    }
];
(function (Applet) {
    let OauthServiceTypeEnum;
    (function (OauthServiceTypeEnum) {
        OauthServiceTypeEnum[OauthServiceTypeEnum["Oauth"] = "oauth"] = "Oauth";
    })(OauthServiceTypeEnum = Applet.OauthServiceTypeEnum || (Applet.OauthServiceTypeEnum = {}));
})(Applet = exports.Applet || (exports.Applet = {}));
/**
 * Appletのダウンロード数
 */
class AppletDownloadNum {
    static getAttributeTypeMap() {
        return AppletDownloadNum.attributeTypeMap;
    }
}
exports.AppletDownloadNum = AppletDownloadNum;
AppletDownloadNum.discriminator = undefined;
AppletDownloadNum.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "num",
        baseName: "num",
        type: "number"
    }
];
/**
 * Appletのイイネ！の総数
 */
class AppletGoodNum {
    static getAttributeTypeMap() {
        return AppletGoodNum.attributeTypeMap;
    }
}
exports.AppletGoodNum = AppletGoodNum;
AppletGoodNum.discriminator = undefined;
AppletGoodNum.attributeTypeMap = [
    {
        name: "num",
        baseName: "num",
        type: "number"
    }
];
/**
 * Appletそのものとは別のAppletに関する情報
 */
class AppletInfo {
    static getAttributeTypeMap() {
        return AppletInfo.attributeTypeMap;
    }
}
exports.AppletInfo = AppletInfo;
AppletInfo.discriminator = undefined;
AppletInfo.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "ownerId",
        baseName: "ownerId",
        type: "string"
    },
    {
        name: "likeNum",
        baseName: "likeNum",
        type: "number"
    },
    {
        name: "downloadNum",
        baseName: "downloadNum",
        type: "number"
    },
    {
        name: "publicStatus",
        baseName: "publicStatus",
        type: "boolean"
    },
    {
        name: "storeStatus",
        baseName: "storeStatus",
        type: "AppletInfo.StoreStatusEnum"
    },
    {
        name: "release",
        baseName: "release",
        type: "string"
    },
    {
        name: "compatible",
        baseName: "compatible",
        type: "Array<AppletInfoCompatible>"
    },
    {
        name: "submitDate",
        baseName: "submitDate",
        type: "Date"
    }
];
(function (AppletInfo) {
    let StoreStatusEnum;
    (function (StoreStatusEnum) {
        StoreStatusEnum[StoreStatusEnum["Published"] = "published"] = "Published";
        StoreStatusEnum[StoreStatusEnum["WaitingReview"] = "waiting_review"] = "WaitingReview";
        StoreStatusEnum[StoreStatusEnum["Rejected"] = "rejected"] = "Rejected";
        StoreStatusEnum[StoreStatusEnum["Deleted"] = "deleted"] = "Deleted";
    })(StoreStatusEnum = AppletInfo.StoreStatusEnum || (AppletInfo.StoreStatusEnum = {}));
})(AppletInfo = exports.AppletInfo || (exports.AppletInfo = {}));
class AppletInfoCompatible {
    static getAttributeTypeMap() {
        return AppletInfoCompatible.attributeTypeMap;
    }
}
exports.AppletInfoCompatible = AppletInfoCompatible;
AppletInfoCompatible.discriminator = undefined;
AppletInfoCompatible.attributeTypeMap = [
    {
        name: "vendor",
        baseName: "vendor",
        type: "string"
    },
    {
        name: "models",
        baseName: "models",
        type: "Array<string>"
    }
];
/**
 * 各Blockのpreferencesに具体的な値を設定した辞書オブジェクト。 keyはBlockのID、valueは`object`。Valueの`object`は、Blockの`preferences`に含まれる`properties`をkey、設定値をvalueとする。 ストアの存在とAppletの共有を前提とする環境下では、ここで定める値はApplet作成者の決めたデフォルト値という扱いで、 Applet使用者は一部または全部の値を自分でカスタマイズしても良い。 カスタマイズした場合、ユーザ個別のpreferencesは別リソースとなる見込みだが、プロトタイプではユーザ端末上のアプリ内のローカルな状態で構わない。
 */
class AppletPreferences {
    static getAttributeTypeMap() {
        return AppletPreferences.attributeTypeMap;
    }
}
exports.AppletPreferences = AppletPreferences;
AppletPreferences.discriminator = undefined;
AppletPreferences.attributeTypeMap = [];
/**
 * Appletの公開・非公開の設定(ディベロッパが決める)
 */
class AppletPublicStatus {
    static getAttributeTypeMap() {
        return AppletPublicStatus.attributeTypeMap;
    }
}
exports.AppletPublicStatus = AppletPublicStatus;
AppletPublicStatus.discriminator = undefined;
AppletPublicStatus.attributeTypeMap = [
    {
        name: "status",
        baseName: "status",
        type: "boolean"
    }
];
/**
 * Appletの申請状態の管理
 */
class AppletStoreStatus {
    static getAttributeTypeMap() {
        return AppletStoreStatus.attributeTypeMap;
    }
}
exports.AppletStoreStatus = AppletStoreStatus;
AppletStoreStatus.discriminator = undefined;
AppletStoreStatus.attributeTypeMap = [
    {
        name: "status",
        baseName: "status",
        type: "AppletStoreStatus.StatusEnum"
    },
    {
        name: "message",
        baseName: "message",
        type: "string"
    },
    {
        name: "release",
        baseName: "release",
        type: "string"
    }
];
(function (AppletStoreStatus) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Published"] = "published"] = "Published";
        StatusEnum[StatusEnum["WaitingReview"] = "waiting_review"] = "WaitingReview";
        StatusEnum[StatusEnum["Rejected"] = "rejected"] = "Rejected";
        StatusEnum[StatusEnum["Deleted"] = "deleted"] = "Deleted";
    })(StatusEnum = AppletStoreStatus.StatusEnum || (AppletStoreStatus.StatusEnum = {}));
})(AppletStoreStatus = exports.AppletStoreStatus || (exports.AppletStoreStatus = {}));
/**
 * Appletテンプレートを規定するオブジェクト
 */
class AppletTemplate {
    static getAttributeTypeMap() {
        return AppletTemplate.attributeTypeMap;
    }
}
exports.AppletTemplate = AppletTemplate;
AppletTemplate.discriminator = undefined;
AppletTemplate.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "name",
        baseName: "name",
        type: "I18nObject"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "TemplateType"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "number"
    },
    {
        name: "services",
        baseName: "services",
        type: "number"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "number"
    },
    {
        name: "input",
        baseName: "input",
        type: "TemplateInputRequired"
    },
    {
        name: "output",
        baseName: "output",
        type: "TemplateOutputRequired"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "templatePreference",
        baseName: "templatePreference",
        type: "AppletPreferences"
    }
];
/**
 * Appletのバージョン。 バージョンナンバーは X.Y.Z の形式で記述するものとする。 X、Y、Z は負でない整数値でなくてはならず、各数値の先頭に0を配置してはならない。
 */
class AppletVersion {
    static getAttributeTypeMap() {
        return AppletVersion.attributeTypeMap;
    }
}
exports.AppletVersion = AppletVersion;
AppletVersion.discriminator = undefined;
AppletVersion.attributeTypeMap = [];
/**
 * AppletとAppletInfoをまとめたもの。
 */
class AppletWholeInfo {
    static getAttributeTypeMap() {
        return AppletWholeInfo.attributeTypeMap;
    }
}
exports.AppletWholeInfo = AppletWholeInfo;
AppletWholeInfo.discriminator = undefined;
AppletWholeInfo.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "applet",
        baseName: "applet",
        type: "Applet"
    },
    {
        name: "appletInfo",
        baseName: "appletInfo",
        type: "AppletInfo"
    }
];
/**
 * AppletWiringsオブジェクトのleafとなるオブジェクト。`input`に入力するための値を出力する元となる`output`を指定する。
 */
class AppletWiringSource {
    static getAttributeTypeMap() {
        return AppletWiringSource.attributeTypeMap;
    }
}
exports.AppletWiringSource = AppletWiringSource;
AppletWiringSource.discriminator = undefined;
AppletWiringSource.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "property",
        baseName: "property",
        type: "string"
    }
];
/**
 * Block間の`input`/`output`をどのように結びつけるか定めた辞書オブジェクト。結線規則。 keyは`input`を受け取る側のBlockのID、valueは`object`。Valueの`object`はBlockの`input`に含まれる`properties`をkey、 AppletWiringSourceオブジェクトをvalueとする。 あるBlockの`output`の一部または全部を不要な場合に読み捨てることはAppletの実行上問題を来さないが、 **`input`に不足がある場合はAppletの実行が不可能になる**ことから、`input`が全て充足していることがAppletの成立条件であり、従ってWiringでも`input`を起点として記述する。 省略される可能性もあることに注意する。例えば、`default`値をもっている`input` propertyに関する規則や、 `input`に有効なpropertyを持たないBlockに関する規則などは省略可能である。 このオブジェクトはApplet作成者がApplet作成アプリ上で編集した内容をJSONとして表現したものになる。 今後の検討課題として、値の暗黙的な変換規則の整備や、明示的な変換・編集などを記述できるようにするかどうか、 といった点が上がっている。が、プロトタイプの間は`type`の一致を検証する程度で、Blockの実装側で値の形式は既知として進める予定。
 */
class AppletWirings {
    static getAttributeTypeMap() {
        return AppletWirings.attributeTypeMap;
    }
}
exports.AppletWirings = AppletWirings;
AppletWirings.discriminator = undefined;
AppletWirings.attributeTypeMap = [];
/**
 * 認証タイプ。 認証なしの場合はこのパラメータはセットされない。
 */
class AuthType extends Array {
    static getAttributeTypeMap() {
        return AuthType.attributeTypeMap;
    }
}
exports.AuthType = AuthType;
AuthType.discriminator = undefined;
AuthType.attributeTypeMap = [];
/**
 * 400 Bad Requestとともに返却されるエラーオブジェクト。 API仕様に定めたJSON schemaにマッチしなかった場合などにこのエラーとなる。 エラー内容は現状では正規化されてはいないが、正規化する場合はDodaiのエラーレスポンス形式に合わせる。
 */
class BadRequest {
    static getAttributeTypeMap() {
        return BadRequest.attributeTypeMap;
    }
}
exports.BadRequest = BadRequest;
BadRequest.discriminator = undefined;
BadRequest.attributeTypeMap = [];
class Body {
    static getAttributeTypeMap() {
        return Body.attributeTypeMap;
    }
}
exports.Body = Body;
Body.discriminator = undefined;
Body.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "toolIds",
        baseName: "toolIds",
        type: "Array<ToolId>"
    },
    {
        name: "categoryIds",
        baseName: "categoryIds",
        type: "Array<CategoryId>"
    },
    {
        name: "vendorId",
        baseName: "vendorId",
        type: "VendorId"
    },
    {
        name: "deviceId",
        baseName: "deviceId",
        type: "DeviceTypeId"
    },
    {
        name: "iconUrl",
        baseName: "iconUrl",
        type: "string"
    },
    {
        name: "title",
        baseName: "title",
        type: "I18nObject"
    },
    {
        name: "version",
        baseName: "version",
        type: "AppletVersion"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "compatible",
        baseName: "compatible",
        type: "Compatible"
    },
    {
        name: "trigger",
        baseName: "trigger",
        type: "string"
    },
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "action",
        baseName: "action",
        type: "string"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "preferences",
        baseName: "preferences",
        type: "AppletPreferences"
    },
    {
        name: "permissionList",
        baseName: "permissionList",
        type: "PermissionList"
    },
    {
        name: "oauthServiceType",
        baseName: "oauthServiceType",
        type: "Body.OauthServiceTypeEnum"
    },
    {
        name: "serviceProxy",
        baseName: "serviceProxy",
        type: "ServiceProxyData"
    },
    {
        name: "actionProxy",
        baseName: "actionProxy",
        type: "ActionProxyData"
    },
    {
        name: "_public",
        baseName: "public",
        type: "boolean"
    },
    {
        name: "proxies",
        baseName: "proxies",
        type: "Proxies"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "TemplateType"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "Triggers"
    },
    {
        name: "services",
        baseName: "services",
        type: "Services"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "Actions"
    },
    {
        name: "osType",
        baseName: "osType",
        type: "OsType"
    }
];
(function (Body) {
    let OauthServiceTypeEnum;
    (function (OauthServiceTypeEnum) {
        OauthServiceTypeEnum[OauthServiceTypeEnum["Oauth"] = "oauth"] = "Oauth";
    })(OauthServiceTypeEnum = Body.OauthServiceTypeEnum || (Body.OauthServiceTypeEnum = {}));
})(Body = exports.Body || (exports.Body = {}));
class Body1 {
    static getAttributeTypeMap() {
        return Body1.attributeTypeMap;
    }
}
exports.Body1 = Body1;
Body1.discriminator = undefined;
Body1.attributeTypeMap = [
    {
        name: "toolIds",
        baseName: "toolIds",
        type: "Array<ToolId>"
    },
    {
        name: "categoryIds",
        baseName: "categoryIds",
        type: "Array<CategoryId>"
    },
    {
        name: "vendorId",
        baseName: "vendorId",
        type: "VendorId"
    },
    {
        name: "deviceId",
        baseName: "deviceId",
        type: "DeviceTypeId"
    },
    {
        name: "iconUrl",
        baseName: "iconUrl",
        type: "string"
    },
    {
        name: "title",
        baseName: "title",
        type: "I18nObject"
    },
    {
        name: "version",
        baseName: "version",
        type: "AppletVersion"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "compatible",
        baseName: "compatible",
        type: "Compatible"
    },
    {
        name: "trigger",
        baseName: "trigger",
        type: "string"
    },
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "action",
        baseName: "action",
        type: "string"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "preferences",
        baseName: "preferences",
        type: "AppletPreferences"
    },
    {
        name: "permissionList",
        baseName: "permissionList",
        type: "PermissionList"
    },
    {
        name: "oauthServiceType",
        baseName: "oauthServiceType",
        type: "Body1.OauthServiceTypeEnum"
    },
    {
        name: "serviceProxy",
        baseName: "serviceProxy",
        type: "ServiceProxyData"
    },
    {
        name: "actionProxy",
        baseName: "actionProxy",
        type: "ActionProxyData"
    },
    {
        name: "_public",
        baseName: "public",
        type: "boolean"
    },
    {
        name: "proxies",
        baseName: "proxies",
        type: "Proxies"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "TemplateType"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "Triggers"
    },
    {
        name: "services",
        baseName: "services",
        type: "Services"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "Actions"
    },
    {
        name: "osType",
        baseName: "osType",
        type: "OsType"
    }
];
(function (Body1) {
    let OauthServiceTypeEnum;
    (function (OauthServiceTypeEnum) {
        OauthServiceTypeEnum[OauthServiceTypeEnum["Oauth"] = "oauth"] = "Oauth";
    })(OauthServiceTypeEnum = Body1.OauthServiceTypeEnum || (Body1.OauthServiceTypeEnum = {}));
})(Body1 = exports.Body1 || (exports.Body1 = {}));
class Body2 {
    static getAttributeTypeMap() {
        return Body2.attributeTypeMap;
    }
}
exports.Body2 = Body2;
Body2.discriminator = undefined;
Body2.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "changeNum",
        baseName: "changeNum",
        type: "number"
    }
];
class Body3 {
    static getAttributeTypeMap() {
        return Body3.attributeTypeMap;
    }
}
exports.Body3 = Body3;
Body3.discriminator = undefined;
Body3.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "num",
        baseName: "num",
        type: "number"
    }
];
class Body4 {
    static getAttributeTypeMap() {
        return Body4.attributeTypeMap;
    }
}
exports.Body4 = Body4;
Body4.discriminator = undefined;
Body4.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "status",
        baseName: "status",
        type: "boolean"
    }
];
class Body5 {
    static getAttributeTypeMap() {
        return Body5.attributeTypeMap;
    }
}
exports.Body5 = Body5;
Body5.discriminator = undefined;
Body5.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "status",
        baseName: "status",
        type: "boolean"
    }
];
class Body6 {
    static getAttributeTypeMap() {
        return Body6.attributeTypeMap;
    }
}
exports.Body6 = Body6;
Body6.discriminator = undefined;
Body6.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "status",
        baseName: "status",
        type: "Body6.StatusEnum"
    },
    {
        name: "message",
        baseName: "message",
        type: "string"
    }
];
(function (Body6) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Published"] = "published"] = "Published";
        StatusEnum[StatusEnum["WaitingReview"] = "waiting_review"] = "WaitingReview";
        StatusEnum[StatusEnum["Rejected"] = "rejected"] = "Rejected";
        StatusEnum[StatusEnum["Deleted"] = "deleted"] = "Deleted";
        StatusEnum[StatusEnum["Testing"] = "testing"] = "Testing";
    })(StatusEnum = Body6.StatusEnum || (Body6.StatusEnum = {}));
})(Body6 = exports.Body6 || (exports.Body6 = {}));
class Body7 {
    static getAttributeTypeMap() {
        return Body7.attributeTypeMap;
    }
}
exports.Body7 = Body7;
Body7.discriminator = undefined;
Body7.attributeTypeMap = [
    {
        name: "appletId",
        baseName: "appletId",
        type: "string"
    },
    {
        name: "status",
        baseName: "status",
        type: "Body7.StatusEnum"
    },
    {
        name: "message",
        baseName: "message",
        type: "string"
    }
];
(function (Body7) {
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Published"] = "published"] = "Published";
        StatusEnum[StatusEnum["WaitingReview"] = "waiting_review"] = "WaitingReview";
        StatusEnum[StatusEnum["Rejected"] = "rejected"] = "Rejected";
        StatusEnum[StatusEnum["Deleted"] = "deleted"] = "Deleted";
        StatusEnum[StatusEnum["Testing"] = "testing"] = "Testing";
    })(StatusEnum = Body7.StatusEnum || (Body7.StatusEnum = {}));
})(Body7 = exports.Body7 || (exports.Body7 = {}));
class Body8 {
    static getAttributeTypeMap() {
        return Body8.attributeTypeMap;
    }
}
exports.Body8 = Body8;
Body8.discriminator = undefined;
Body8.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "I18nObject"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "Body8.TemplateTypeEnum"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "number"
    },
    {
        name: "services",
        baseName: "services",
        type: "number"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "number"
    },
    {
        name: "input",
        baseName: "input",
        type: "TemplateInputRequired"
    },
    {
        name: "output",
        baseName: "output",
        type: "TemplateOutputRequired"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "templatePreferences",
        baseName: "templatePreferences",
        type: "AppletPreferences"
    }
];
(function (Body8) {
    let TemplateTypeEnum;
    (function (TemplateTypeEnum) {
        TemplateTypeEnum[TemplateTypeEnum["ServiceParallel"] = "serviceParallel"] = "ServiceParallel";
        TemplateTypeEnum[TemplateTypeEnum["ServiceSerial"] = "serviceSerial"] = "ServiceSerial";
        TemplateTypeEnum[TemplateTypeEnum["ServiceExclusive"] = "serviceExclusive"] = "ServiceExclusive";
    })(TemplateTypeEnum = Body8.TemplateTypeEnum || (Body8.TemplateTypeEnum = {}));
})(Body8 = exports.Body8 || (exports.Body8 = {}));
class Body9 {
    static getAttributeTypeMap() {
        return Body9.attributeTypeMap;
    }
}
exports.Body9 = Body9;
Body9.discriminator = undefined;
Body9.attributeTypeMap = [
    {
        name: "notificationToken",
        baseName: "notificationToken",
        type: "string"
    },
    {
        name: "appId",
        baseName: "appId",
        type: "string"
    },
    {
        name: "osType",
        baseName: "osType",
        type: "string"
    }
];
class Body10 {
    static getAttributeTypeMap() {
        return Body10.attributeTypeMap;
    }
}
exports.Body10 = Body10;
Body10.discriminator = undefined;
Body10.attributeTypeMap = [
    {
        name: "alert",
        baseName: "alert",
        type: "string"
    },
    {
        name: "badge",
        baseName: "badge",
        type: "number"
    },
    {
        name: "sound",
        baseName: "sound",
        type: "string"
    },
    {
        name: "contentAvailable",
        baseName: "contentAvailable",
        type: "boolean"
    },
    {
        name: "expiresAt",
        baseName: "expiresAt",
        type: "number"
    },
    {
        name: "priority",
        baseName: "priority",
        type: "number"
    },
    {
        name: "data",
        baseName: "data",
        type: "any"
    }
];
/**
 * CategoryのIDとして用いられる。
 */
class CategoryId {
    static getAttributeTypeMap() {
        return CategoryId.attributeTypeMap;
    }
}
exports.CategoryId = CategoryId;
CategoryId.discriminator = undefined;
CategoryId.attributeTypeMap = [];
class Compatible extends Array {
}
exports.Compatible = Compatible;
Compatible.discriminator = undefined;
/**
 * DeviceTypeのIDとして用いられる。
 */
class DeviceTypeId {
    static getAttributeTypeMap() {
        return DeviceTypeId.attributeTypeMap;
    }
}
exports.DeviceTypeId = DeviceTypeId;
DeviceTypeId.discriminator = undefined;
DeviceTypeId.attributeTypeMap = [];
/**
 * 言語毎の文言を指定できるオブジェクト。
 */
class I18nObject {
    static getAttributeTypeMap() {
        return I18nObject.attributeTypeMap;
    }
}
exports.I18nObject = I18nObject;
I18nObject.discriminator = undefined;
I18nObject.attributeTypeMap = [];
class InlineResponse200 {
    static getAttributeTypeMap() {
        return InlineResponse200.attributeTypeMap;
    }
}
exports.InlineResponse200 = InlineResponse200;
InlineResponse200.discriminator = undefined;
InlineResponse200.attributeTypeMap = [
    {
        name: "applets",
        baseName: "applets",
        type: "Array<AppletWholeInfo>"
    }
];
class InlineResponse2001 {
    static getAttributeTypeMap() {
        return InlineResponse2001.attributeTypeMap;
    }
}
exports.InlineResponse2001 = InlineResponse2001;
InlineResponse2001.discriminator = undefined;
InlineResponse2001.attributeTypeMap = [
    {
        name: "appletTemplate",
        baseName: "appletTemplate",
        type: "Array<AppletTemplate>"
    }
];
/**
 * 404 Not Foundとともに返却されるエラーオブジェクト。 指定されたリソースが存在しなかった場合にこのエラーとなる。
 */
class NotFound {
    static getAttributeTypeMap() {
        return NotFound.attributeTypeMap;
    }
}
exports.NotFound = NotFound;
NotFound.discriminator = undefined;
NotFound.attributeTypeMap = [];
/**
 * blockが動作する対象スマホOS
 */
class OsType {
    static getAttributeTypeMap() {
        return OsType.attributeTypeMap;
    }
}
exports.OsType = OsType;
OsType.discriminator = undefined;
OsType.attributeTypeMap = [];
/**
 * Applet実行時に必要となるクライアントOSのパーミッションリスト Appletに含まれるBlockのパーミッションリストを結合したもの iOSとAndroidでパーミッションが必要となるものに差異があるため、各クライアントOS毎に定義している
 */
class PermissionList {
    static getAttributeTypeMap() {
        return PermissionList.attributeTypeMap;
    }
}
exports.PermissionList = PermissionList;
PermissionList.discriminator = undefined;
PermissionList.attributeTypeMap = [
    {
        name: "ios",
        baseName: "ios",
        type: "Array<PermissionList.IosEnum>"
    },
    {
        name: "android",
        baseName: "android",
        type: "Array<PermissionList.AndroidEnum>"
    }
];
(function (PermissionList) {
    let IosEnum;
    (function (IosEnum) {
        IosEnum[IosEnum["Location"] = "location"] = "Location";
        IosEnum[IosEnum["MediaLibrary"] = "mediaLibrary"] = "MediaLibrary";
    })(IosEnum = PermissionList.IosEnum || (PermissionList.IosEnum = {}));
    let AndroidEnum;
    (function (AndroidEnum) {
        AndroidEnum[AndroidEnum["Location"] = "location"] = "Location";
        AndroidEnum[AndroidEnum["MediaStore"] = "mediaStore"] = "MediaStore";
    })(AndroidEnum = PermissionList.AndroidEnum || (PermissionList.AndroidEnum = {}));
})(PermissionList = exports.PermissionList || (exports.PermissionList = {}));
/**
 * 外部APIで必要となる情報を入力
 */
class Proxies extends null {
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Proxies.attributeTypeMap);
    }
}
exports.Proxies = Proxies;
Proxies.discriminator = undefined;
Proxies.attributeTypeMap = [];
/**
 * ServiceProxyの情報。
 */
class ServiceProxyData {
    static getAttributeTypeMap() {
        return ServiceProxyData.attributeTypeMap;
    }
}
exports.ServiceProxyData = ServiceProxyData;
ServiceProxyData.discriminator = undefined;
ServiceProxyData.attributeTypeMap = [
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "parameters",
        baseName: "parameters",
        type: "Array<ServiceProxyData.ParametersEnum>"
    },
    {
        name: "authType",
        baseName: "authType",
        type: "AuthType"
    }
];
(function (ServiceProxyData) {
    let ParametersEnum;
    (function (ParametersEnum) {
        ParametersEnum[ParametersEnum["Location"] = "location"] = "Location";
    })(ParametersEnum = ServiceProxyData.ParametersEnum || (ServiceProxyData.ParametersEnum = {}));
})(ServiceProxyData = exports.ServiceProxyData || (exports.ServiceProxyData = {}));
/**
 * Appletテンプレート利用時の2つ目以降のService Block IDの列 1つ目のTrigger Blockは\"service\"に指定されたものとし、2つ目以降をこの配列に格納 処理の優先順位がある場合、\"service\"に記載されたもの→配列に記載されたBlockの先頭から末尾の順となる
 */
class Services extends Array {
}
exports.Services = Services;
Services.discriminator = undefined;
class Template {
    static getAttributeTypeMap() {
        return Template.attributeTypeMap;
    }
}
exports.Template = Template;
Template.discriminator = undefined;
Template.attributeTypeMap = [
    {
        name: "id",
        baseName: "id",
        type: "string"
    },
    {
        name: "name",
        baseName: "name",
        type: "I18nObject"
    },
    {
        name: "description",
        baseName: "description",
        type: "I18nObject"
    },
    {
        name: "templateType",
        baseName: "templateType",
        type: "Template.TemplateTypeEnum"
    },
    {
        name: "triggers",
        baseName: "triggers",
        type: "number"
    },
    {
        name: "services",
        baseName: "services",
        type: "number"
    },
    {
        name: "actions",
        baseName: "actions",
        type: "number"
    },
    {
        name: "input",
        baseName: "input",
        type: "TemplateInputRequired"
    },
    {
        name: "output",
        baseName: "output",
        type: "TemplateOutputRequired"
    },
    {
        name: "wirings",
        baseName: "wirings",
        type: "AppletWirings"
    },
    {
        name: "templatePreferences",
        baseName: "templatePreferences",
        type: "AppletPreferences"
    }
];
(function (Template) {
    let TemplateTypeEnum;
    (function (TemplateTypeEnum) {
        TemplateTypeEnum[TemplateTypeEnum["ServiceParallel"] = "serviceParallel"] = "ServiceParallel";
        TemplateTypeEnum[TemplateTypeEnum["ServiceSerial"] = "serviceSerial"] = "ServiceSerial";
        TemplateTypeEnum[TemplateTypeEnum["ServiceExclusive"] = "serviceExclusive"] = "ServiceExclusive";
    })(TemplateTypeEnum = Template.TemplateTypeEnum || (Template.TemplateTypeEnum = {}));
})(Template = exports.Template || (exports.Template = {}));
class TemplateInputRequired {
    static getAttributeTypeMap() {
        return TemplateInputRequired.attributeTypeMap;
    }
}
exports.TemplateInputRequired = TemplateInputRequired;
TemplateInputRequired.discriminator = undefined;
TemplateInputRequired.attributeTypeMap = [
    {
        name: "service",
        baseName: "service",
        type: "string"
    },
    {
        name: "action",
        baseName: "action",
        type: "string"
    }
];
class TemplateOutputRequired {
    static getAttributeTypeMap() {
        return TemplateOutputRequired.attributeTypeMap;
    }
}
exports.TemplateOutputRequired = TemplateOutputRequired;
TemplateOutputRequired.discriminator = undefined;
TemplateOutputRequired.attributeTypeMap = [
    {
        name: "trigger",
        baseName: "trigger",
        type: "string"
    },
    {
        name: "service",
        baseName: "service",
        type: "string"
    }
];
/**
 * Appletテンプレートの種類 BlockTypeがおなじものをどう実行するかの定義
 */
class TemplateType {
    static getAttributeTypeMap() {
        return TemplateType.attributeTypeMap;
    }
}
exports.TemplateType = TemplateType;
TemplateType.discriminator = undefined;
TemplateType.attributeTypeMap = [];
/**
 * ToolのIDとして用いられる。
 */
class ToolId {
    static getAttributeTypeMap() {
        return ToolId.attributeTypeMap;
    }
}
exports.ToolId = ToolId;
ToolId.discriminator = undefined;
ToolId.attributeTypeMap = [];
/**
 * Appletテンプレート利用時の2つ目以降のTrigger Block IDの列 1つ目のTrigger Blockは\"trigger\"に指定されたものとし、2つ目以降をこの配列に格納 処理の優先順位がある場合、\"trigger\"に記載されたもの→配列に記載されたBlockの先頭から末尾の順となる
 */
class Triggers extends Array {
}
exports.Triggers = Triggers;
Triggers.discriminator = undefined;
/**
 * 401 Unauthorizedとともに返却されるエラーオブジェクト。 その他、Dodaiからエラーレスポンスが帰ってきた場合も該当する。 エラー内容は現状では正規化されてはいないが、正規化する場合はDodaiのエラーレスポンス形式に合わせる。
 */
class Unauthorized {
    static getAttributeTypeMap() {
        return Unauthorized.attributeTypeMap;
    }
}
exports.Unauthorized = Unauthorized;
Unauthorized.discriminator = undefined;
Unauthorized.attributeTypeMap = [];
/**
 * VendorのIDとして用いられる。
 */
class VendorId {
    static getAttributeTypeMap() {
        return VendorId.attributeTypeMap;
    }
}
exports.VendorId = VendorId;
VendorId.discriminator = undefined;
VendorId.attributeTypeMap = [];
let enumsMap = {
    "ActionProxyData.ParametersEnum": ActionProxyData.ParametersEnum,
    "Applet.OauthServiceTypeEnum": Applet.OauthServiceTypeEnum,
    "AppletInfo.StoreStatusEnum": AppletInfo.StoreStatusEnum,
    "AppletStoreStatus.StatusEnum": AppletStoreStatus.StatusEnum,
    "Body.OauthServiceTypeEnum": Body.OauthServiceTypeEnum,
    "Body1.OauthServiceTypeEnum": Body1.OauthServiceTypeEnum,
    "Body6.StatusEnum": Body6.StatusEnum,
    "Body7.StatusEnum": Body7.StatusEnum,
    "Body8.TemplateTypeEnum": Body8.TemplateTypeEnum,
    "PermissionList.IosEnum": PermissionList.IosEnum,
    "PermissionList.AndroidEnum": PermissionList.AndroidEnum,
    "ServiceProxyData.ParametersEnum": ServiceProxyData.ParametersEnum,
    "Template.TemplateTypeEnum": Template.TemplateTypeEnum
};
let typeMap = {
    ActionProxyData: ActionProxyData,
    Actions: Actions,
    Applet: Applet,
    AppletDownloadNum: AppletDownloadNum,
    AppletGoodNum: AppletGoodNum,
    AppletInfo: AppletInfo,
    AppletInfoCompatible: AppletInfoCompatible,
    AppletPreferences: AppletPreferences,
    AppletPublicStatus: AppletPublicStatus,
    AppletStoreStatus: AppletStoreStatus,
    AppletTemplate: AppletTemplate,
    AppletVersion: AppletVersion,
    AppletWholeInfo: AppletWholeInfo,
    AppletWiringSource: AppletWiringSource,
    AppletWirings: AppletWirings,
    AuthType: AuthType,
    BadRequest: BadRequest,
    Body: Body,
    Body1: Body1,
    Body2: Body2,
    Body3: Body3,
    Body4: Body4,
    Body5: Body5,
    Body6: Body6,
    Body7: Body7,
    Body8: Body8,
    CategoryId: CategoryId,
    Compatible: Compatible,
    DeviceTypeId: DeviceTypeId,
    I18nObject: I18nObject,
    InlineResponse200: InlineResponse200,
    InlineResponse2001: InlineResponse2001,
    NotFound: NotFound,
    OsType: OsType,
    PermissionList: PermissionList,
    Proxies: Proxies,
    ServiceProxyData: ServiceProxyData,
    Services: Services,
    Template: Template,
    TemplateInputRequired: TemplateInputRequired,
    TemplateOutputRequired: TemplateOutputRequired,
    TemplateType: TemplateType,
    ToolId: ToolId,
    Triggers: Triggers,
    Unauthorized: Unauthorized,
    VendorId: VendorId
};
class HttpBasicAuth {
    constructor() {
        this.username = "";
        this.password = "";
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username,
            password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = "";
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" &&
            requestOptions &&
            requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = "";
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = "";
        this.password = "";
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
var DefaultApiApiKeys;
(function (DefaultApiApiKeys) {
    DefaultApiApiKeys[DefaultApiApiKeys["JWTToken"] = 0] = "JWTToken";
})(DefaultApiApiKeys = exports.DefaultApiApiKeys || (exports.DefaultApiApiKeys = {}));
class DefaultApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            default: new VoidAuth(),
            JWTToken: new ApiKeyAuth("header", "Authorization")
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     * プッシュ通知のNotification Tokenの登録を行う.
     * @param body
     * @param {*} [options] Override http request options.
     */
    registerNotificationToken(body, options = {}) {
        const localVarPath = this.basePath + "/push/notificationToken";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling registerNotificationToken.");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body9")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletを削除する。
     * @param id
     * @param {*} [options] Override http request options.
     */
    deleteApplet(id) {
        const localVarPath = this.basePath +
            "/applets/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        console.log(localVarPath);
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling deleteApplet.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "DELETE",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletテンプレートを削除する security modelは要検討。
     * @param id
     */
    deleteTemplate(id) {
        const localVarPath = this.basePath +
            "/templates/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling deleteTemplate.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "DELETE",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletを取得する。 (SDK向けAPI)
     * @param id
     * @param deviceId 対象とするデバイス種別をIDで指定する。(複数指定可能) レスポンスには、_指定したデバイスで実行可能なAppletのみ_が含まれる。
     * @param osType blockが動作する対象スマホOS
     */
    getApplet(id, deviceId, osType) {
        const localVarPath = this.basePath +
            "/applets/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling getApplet.");
        }
        if (deviceId !== undefined) {
            localVarQueryParameters["deviceId"] = ObjectSerializer.serialize(deviceId, "Array<string>");
        }
        if (osType !== undefined) {
            localVarQueryParameters["osType"] = ObjectSerializer.serialize(osType, "'iOS' | 'Android' | 'none'");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Applet");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのダウンロード数を取得する。
     * @param appletId
     */
    getAppletDownloadNum(appletId) {
        const localVarPath = this.basePath + "/appletDownloadNum";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling getAppletDownloadNum.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletDownloadNum");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのイイネ！の数を取得する。
     * @param appletId
     */
    getAppletGoodNum(appletId) {
        const localVarPath = this.basePath + "/appletGoodNum";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling getAppletGoodNum.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletGoodNum");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのAppletPublicStatusを取得する。
     * @param appletId
     */
    getAppletPublicStatus(appletId) {
        const localVarPath = this.basePath + "/appletPublicStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling getAppletPublicStatus.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletPublicStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletの審査ステータスを取得する。
     * @param appletId
     */
    getAppletStoreStatus(appletId) {
        const localVarPath = this.basePath + "/appletStoreStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling getAppletStoreStatus.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletStoreStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * UserのApplet一覧を取得する。User keyで実行可能。 (AppletBuilder向けAPI)
     * @param storeStatus AppletStoreStatusの審査ステータスと一致するものを含む。 （主に、申請待ち一覧を取得する際に使用する）
     * @param publicStatus AppletPublicStatusの公開ステータスと一致するものを含む。
     */
    getMyApplets(storeStatus, publicStatus) {
        const localVarPath = this.basePath + "/createownapplets";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (storeStatus !== undefined) {
            localVarQueryParameters["storeStatus"] = ObjectSerializer.serialize(storeStatus, "'published' | 'waiting_review' | 'rejected' | 'deleted'");
        }
        if (publicStatus !== undefined) {
            localVarQueryParameters["publicStatus"] = ObjectSerializer.serialize(publicStatus, "boolean");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletテンプレートを取得する。 security modelは要検討。
     * @param id
     */
    getTemplate(id) {
        const localVarPath = this.basePath +
            "/templates/{id}".replace("{" + "id" + "}", encodeURIComponent(String(id)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling getTemplate.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletTemplate");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Applet一覧を取得する。 (Store向けAPI)
     * @param version Appletのバージョンを指定する。 レスポンスには、指定されたバージョン以降のAppletのみが含まれる。 Note: 単なる文字列として保持すると比較が不正確となるため、バージョンナンバーは整数値を X.Y.Z の形式で指定するものとする。 X、Y、Z は負の整数であってはならず、各数値の先頭に0を配置してはならない。 現在は未対応であるが、正確に比較しようとする場合、内部的には&#x60;{ major: integer, minor: integer, patch: integer }&#x60;として値を保持して整数比較するべき。
     * @param appletId AppletIDを指定する。(複数指定可能)
     * @param excludeAppletId Exclude applet ID(s) in get applets
     * @param toolId 対象とするToolのIDを完全一致で指定する。 レスポンスには、_指定した文字列に完全一致する&#x60;toolId&#x60;を持つAppletのみ_が含まれる。
     * @param categoryId 対象とするCategoryのIDを完全一致で指定する。 レスポンスには、_指定した文字列に完全一致する&#x60;categoryId&#x60;を持つAppletのみ_が含まれる。
     * @param deviceId 対象とするデバイス種別をIDで指定する。(複数指定可能) レスポンスには、_指定したデバイスで実行可能なAppletのみ_が含まれる。
     * @param vendorId 対象とするベンダーをIDで指定する。 レスポンスには、_指定したベンダーが開発・管理するAppletのみ_が含まれる。
     * @param storeStatus AppletStoreStatusの審査ステータスと一致するものを含む。 （主に、申請待ち一覧を取得する際に使用する）
     * @param publicStatus AppletPublicStatusの公開ステータスと一致するものを含む。
     * @param ownerId 対象とするオーナーをIDで指定する。(複数指定可能) レスポンスには、_指定したオーナーが所持するAppletのみ_が含まれる。
     * @param title Applets title
     * @param sortBy likeNum順あるいはDate順に並び替える。
     * @param limit データ数を限定する。
     * @param osType blockが動作する対象スマホOS
     */
    listAdminApplets(version, appletId, excludeAppletId, toolId, categoryId, deviceId, vendorId, storeStatus, publicStatus, ownerId, title, sortBy, limit, osType) {
        const localVarPath = this.basePath + "/admin/applets";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error("Required parameter version was null or undefined when calling listAdminApplets.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "Array<string>");
        }
        if (excludeAppletId !== undefined) {
            localVarQueryParameters["excludeAppletId"] = ObjectSerializer.serialize(excludeAppletId, "Array<string>");
        }
        if (toolId !== undefined) {
            localVarQueryParameters["toolId"] = ObjectSerializer.serialize(toolId, "Array<string>");
        }
        if (categoryId !== undefined) {
            localVarQueryParameters["categoryId"] = ObjectSerializer.serialize(categoryId, "Array<string>");
        }
        if (deviceId !== undefined) {
            localVarQueryParameters["deviceId"] = ObjectSerializer.serialize(deviceId, "Array<string>");
        }
        if (vendorId !== undefined) {
            localVarQueryParameters["vendorId"] = ObjectSerializer.serialize(vendorId, "string");
        }
        if (version !== undefined) {
            localVarQueryParameters["version"] = ObjectSerializer.serialize(version, "string");
        }
        if (storeStatus !== undefined) {
            localVarQueryParameters["storeStatus"] = ObjectSerializer.serialize(storeStatus, "'published' | 'waiting_review' | 'rejected' | 'deleted'");
        }
        if (publicStatus !== undefined) {
            localVarQueryParameters["publicStatus"] = ObjectSerializer.serialize(publicStatus, "boolean");
        }
        if (ownerId !== undefined) {
            localVarQueryParameters["ownerId"] = ObjectSerializer.serialize(ownerId, "Array<string>");
        }
        if (title !== undefined) {
            localVarQueryParameters["title"] = ObjectSerializer.serialize(title, "string");
        }
        if (sortBy !== undefined) {
            localVarQueryParameters["sortBy"] = ObjectSerializer.serialize(sortBy, "'likeNum' | 'releaseDate'");
        }
        if (limit !== undefined) {
            localVarQueryParameters["limit"] = ObjectSerializer.serialize(limit, "number");
        }
        if (osType !== undefined) {
            localVarQueryParameters["osType"] = ObjectSerializer.serialize(osType, "'iOS' | 'Android' | 'none'");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Applet一覧を取得する。 (Store向けAPI)
     * @param version Appletのバージョンを指定する。 レスポンスには、指定されたバージョン以降のAppletのみが含まれる。 Note: 単なる文字列として保持すると比較が不正確となるため、バージョンナンバーは整数値を X.Y.Z の形式で指定するものとする。 X、Y、Z は負の整数であってはならず、各数値の先頭に0を配置してはならない。 現在は未対応であるが、正確に比較しようとする場合、内部的には&#x60;{ major: integer, minor: integer, patch: integer }&#x60;として値を保持して整数比較するべき。
     * @param appletId AppletIDを指定する。(複数指定可能)
     * @param excludeAppletId Exclude applet ID(s) in get applets
     * @param toolId 対象とするToolのIDを完全一致で指定する。 レスポンスには、_指定した文字列に完全一致する&#x60;toolId&#x60;を持つAppletのみ_が含まれる。
     * @param categoryId 対象とするCategoryのIDを完全一致で指定する。 レスポンスには、_指定した文字列に完全一致する&#x60;categoryId&#x60;を持つAppletのみ_が含まれる。
     * @param deviceId 対象とするデバイス種別をIDで指定する。(複数指定可能) レスポンスには、_指定したデバイスで実行可能なAppletのみ_が含まれる。
     * @param vendorId 対象とするベンダーをIDで指定する。 レスポンスには、_指定したベンダーが開発・管理するAppletのみ_が含まれる。
     * @param storeStatus AppletStoreStatusの審査ステータスと一致するものを含む。 （主に、申請待ち一覧を取得する際に使用する）
     * @param publicStatus AppletPublicStatusの公開ステータスと一致するものを含む。
     * @param ownerId 対象とするオーナーをIDで指定する。(複数指定可能) レスポンスには、_指定したオーナーが所持するAppletのみ_が含まれる。
     * @param title Applets title
     * @param sortBy likeNum順あるいはDate順に並び替える。
     * @param limit データ数を限定する。
     * @param osType blockが動作する対象スマホOS
     */
    listApplets(version, appletId, excludeAppletId, toolId, categoryId, deviceId, vendorId, storeStatus, publicStatus, ownerId, title, sortBy, limit, osType) {
        const localVarPath = this.basePath + "/applets";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error("Required parameter version was null or undefined when calling listApplets.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = appletId.join(",");
        }
        if (excludeAppletId !== undefined) {
            localVarQueryParameters["excludeAppletId"] = excludeAppletId.join(",");
        }
        if (toolId !== undefined) {
            localVarQueryParameters["toolId"] = toolId.join(",");
        }
        if (categoryId !== undefined) {
            localVarQueryParameters["categoryId"] = categoryId.join(",");
        }
        if (deviceId !== undefined) {
            localVarQueryParameters["deviceId"] = deviceId.join(",");
        }
        if (vendorId !== undefined) {
            localVarQueryParameters["vendorId"] = ObjectSerializer.serialize(vendorId, "string");
        }
        if (version !== undefined) {
            localVarQueryParameters["version"] = ObjectSerializer.serialize(version, "string");
        }
        if (storeStatus !== undefined) {
            localVarQueryParameters["storeStatus"] = ObjectSerializer.serialize(storeStatus, "'published' | 'waiting_review' | 'rejected' | 'deleted'");
        }
        if (publicStatus !== undefined) {
            localVarQueryParameters["publicStatus"] = ObjectSerializer.serialize(publicStatus, "boolean");
        }
        if (ownerId !== undefined) {
            localVarQueryParameters["ownerId"] = ownerId.join(",");
        }
        if (title !== undefined) {
            localVarQueryParameters["title"] = ObjectSerializer.serialize(title, "string");
        }
        if (sortBy !== undefined) {
            localVarQueryParameters["sortBy"] = ObjectSerializer.serialize(sortBy, "'likeNum' | 'releaseDate'");
        }
        if (limit !== undefined) {
            localVarQueryParameters["limit"] = ObjectSerializer.serialize(limit, "number");
        }
        if (osType !== undefined) {
            localVarQueryParameters["osType"] = ObjectSerializer.serialize(osType, "'iOS' | 'Android' | 'none'");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse200");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * テンプレート一覧を取得する security modelは要検討。
     * @param templateId AppletテンプレートID
     * @param templateType Appletテンプレートタイプ
     */
    listTemplates(templateId, templateType) {
        const localVarPath = this.basePath + "/templates";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        if (templateId !== undefined) {
            localVarQueryParameters["templateId"] = ObjectSerializer.serialize(templateId, "Array<string>");
        }
        if (templateType !== undefined) {
            localVarQueryParameters["templateType"] = ObjectSerializer.serialize(templateType, "Array<'serviceParallel' | 'serviceSerial' | 'serviceExclusive'>");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "InlineResponse2001");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Appletを登録する。User keyで実行可能。 trigger/service/actionの組み合わせについてはサーバサイドでもvalidateする。 （注）アプレットを新規作成する際に、postAppletStoreStatusとpostAppletGoodNumも同時に行う。
     * @param body
     */
    postApplet(body) {
        const localVarPath = this.basePath + "/applets";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling postApplet.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body1")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Applet");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのAppletGoodNumを作成する。 postAppletで呼ぶ想定なので、numは0で作成する。
     * @param body
     */
    postAppletGoodNum(body) {
        const localVarPath = this.basePath + "/appletGoodNum";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling postAppletGoodNum.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body3")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletGoodNum");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * アイコンを登録し、URLを取得する。
     * @param appletId
     * @param image アイコン画像（512以上の正方形）
     */
    postAppletIcon(appletId, image, filename) {
        const localVarPath = this.basePath + "/appletIcon";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling postAppletIcon.");
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error("Required parameter image was null or undefined when calling postAppletIcon.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        if (image !== undefined) {
            localVarFormParams["image"] = {
                value: image,
                options: { filename: filename }
            };
        }
        localVarUseFormData = true;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    putAppletIcon(appletId, image, filename) {
        const localVarPath = this.basePath + "/appletIcon";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'appletId' is not null or undefined
        if (appletId === null || appletId === undefined) {
            throw new Error("Required parameter appletId was null or undefined when calling putAppletIcon.");
        }
        // verify required parameter 'image' is not null or undefined
        if (image === null || image === undefined) {
            throw new Error("Required parameter image was null or undefined when calling putAppletIcon.");
        }
        if (appletId !== undefined) {
            localVarQueryParameters["appletId"] = ObjectSerializer.serialize(appletId, "string");
        }
        let localVarUseFormData = false;
        if (image !== undefined) {
            localVarFormParams["image"] = {
                value: image,
                options: { filename: filename }
            };
        }
        localVarUseFormData = true;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのAppletPublicStatusを作成する。 原則、POST /appletの処理内で呼び出すため、意図的に呼び出す必要はない
     * @param body
     */
    postAppletPublicStatus(body) {
        const localVarPath = this.basePath + "/appletPublicStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling postAppletPublicStatus.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body4")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletPublicStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletの審査ステータスを作成する。 postAppletで呼ぶ想定。
     * @param body
     */
    postAppletStoreStatus(body) {
        const localVarPath = this.basePath + "/appletStoreStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling postAppletStoreStatus.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body7")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletStoreStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * APNs用の証明書を登録・更新する. Dodaiルートキーを使う.
     * @param vendorId 証明書に対応するvendorID
     * @param cert APNs用のp12証明書
     * @param pass p12証明書のパスワード
     * @param production 証明書がproduction / sandbox用かを表すフラグ
     * @param {*} [options] Override http request options.
     */
    postCert(vendorId, cert, pass, production, options = {}) {
        const localVarPath = this.basePath + "/push/cert";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error("Required parameter vendorId was null or undefined when calling postCert.");
        }
        // verify required parameter 'cert' is not null or undefined
        if (cert === null || cert === undefined) {
            throw new Error("Required parameter cert was null or undefined when calling postCert.");
        }
        // verify required parameter 'pass' is not null or undefined
        if (pass === null || pass === undefined) {
            throw new Error("Required parameter pass was null or undefined when calling postCert.");
        }
        // verify required parameter 'production' is not null or undefined
        if (production === null || production === undefined) {
            throw new Error("Required parameter production was null or undefined when calling postCert.");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        if (vendorId !== undefined) {
            localVarFormParams["vendorId"] = ObjectSerializer.serialize(vendorId, "string");
        }
        if (cert !== undefined) {
            //localVarFormParams["cert"] = cert;
            localVarFormParams["cert"] = {
                value: cert,
                options: { filename: "test.cert" }
            };
        }
        localVarUseFormData = true;
        if (pass !== undefined) {
            localVarFormParams["pass"] = ObjectSerializer.serialize(pass, "string");
        }
        if (production !== undefined) {
            localVarFormParams["production"] = new Boolean(production).toString();
        }
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Appletを変更する。User keyで実行可能。 trigger/service/actionの組み合わせについてはサーバサイドでもvalidateする。
     * @param body
     */
    putApplet(body) {
        const localVarPath = this.basePath + "/applets";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling putApplet.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "Applet");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのイイネ！の数を変更する。
     * @param body
     */
    putAppletGoodNum(body) {
        const localVarPath = this.basePath + "/appletGoodNum";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling putAppletGoodNum.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body2")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletGoodNum");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletのAppletPublicStatusを変更する。 原則、PUT /appletの処理内で呼び出すため、意図的に呼び出す必要はない
     * @param body
     */
    putAppletPublicStatus(body) {
        const localVarPath = this.basePath + "/appletPublicStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling putAppletPublicStatus.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body5")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletPublicStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ID指定したAppletの審査ステータスを変更する。
     * @param body
     */
    putAppletStoreStatus(body) {
        const localVarPath = this.basePath + "/appletStoreStatus";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling putAppletStoreStatus.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body7")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletStoreStatus");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Appletテンプレートを更新する。 security modelは要検討。
     * @param template
     */
    putTemplate(template) {
        const localVarPath = this.basePath + "/templates";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'template' is not null or undefined
        if (template === null || template === undefined) {
            throw new Error("Required parameter template was null or undefined when calling putTemplate.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(template, "Template")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletTemplate");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * テンプレートを登録する security modelは要検討。
     * @param body
     */
    registTemplate(body) {
        const localVarPath = this.basePath + "/templates";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling registTemplate.");
        }
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body8")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AppletTemplate");
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * ユーザに紐づくデバイスにpush通知を送る 複数デバイスが登録されている場合は全デバイスに送る
     * @param body
     * @param {*} [options] Override http request options.
     */
    sendPush(body, options = {}) {
        const localVarPath = this.basePath + "/push/send";
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        let localVarFormParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling sendPush.");
        }
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Body10")
        };
        this.authentications.JWTToken.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
exports.DefaultApi = DefaultApi;
const wrap = async (proc) => {
    try {
        return await proc();
    }
    catch (e) {
        let code = 400;
        if ('result' in e) {
            let result = e.result();
            if (result.errcode == 1002) {
                let m = result.body.code.match('([0-9]*)-([0-9]*)');
                if (m) {
                    code = parseInt(m[1]);
                }
            }
        }
        else if ('code' in e) {
            let m = e.code.match('([0-9]*)-([0-9]*)');
            if (m) {
                code = parseInt(m[1]);
            }
        }
        return { status: code, body: e };
    }
};
const get = (ds, collection, id, key, opts) => {
    return wrap(async () => {
        let result = await ds.get(collection, id, Object.assign({}, opts || {}, { credential: key }));
        return { status: 200, body: result };
    });
};
function getAppletIcon(ds, applet_id, key) {
    return get(ds, riiiverdb.APPLET_ICON, applet_id, key);
}
exports.getAppletIcon = getAppletIcon;
function getApplet(ds, applet_id, key) {
    return get(ds, riiiverdb.APPLET, applet_id, key);
}
exports.getApplet = getApplet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7Ozs7Ozs7OztBQUVwQjs7Ozs7Ozs7OztHQVVHO0FBRUgsMkNBQTRDO0FBSzVDLGtFQUFvRDtBQUNwRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUNwRCxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUU3QyxrREFBa0Q7QUFDbEQsa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUVsRCx1Q0FBdUM7QUFDdkMsSUFBSSxVQUFVLEdBQUc7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsS0FBSztDQUNOLENBQUM7QUFFRixNQUFNLGdCQUFnQjtJQUNiLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBUyxFQUFFLFlBQW9CO1FBQzNELElBQUksSUFBSSxJQUFJLFNBQVMsRUFBRTtZQUNyQixPQUFPLFlBQVksQ0FBQztTQUNyQjthQUFNLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoRSxPQUFPLFlBQVksQ0FBQztTQUNyQjthQUFNLElBQUksWUFBWSxLQUFLLE1BQU0sRUFBRTtZQUNsQyxPQUFPLFlBQVksQ0FBQztTQUNyQjthQUFNO1lBQ0wsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQzFCLE9BQU8sWUFBWSxDQUFDO2FBQ3JCO1lBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxZQUFZLENBQUMsQ0FBQyw2QkFBNkI7YUFDbkQ7WUFFRCwwQkFBMEI7WUFDMUIsSUFBSSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMs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